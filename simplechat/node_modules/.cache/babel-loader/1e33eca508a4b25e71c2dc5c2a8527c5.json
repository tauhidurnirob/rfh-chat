{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('dexie'), require('react')) : typeof define === 'function' && define.amd ? define(['exports', 'dexie', 'react'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.DexieReactHooks = {}, global.Dexie, global.React));\n})(this, function (exports, dexie, React) {\n  'use strict';\n\n  function _interopDefaultLegacy(e) {\n    return e && typeof e === 'object' && 'default' in e ? e : {\n      'default': e\n    };\n  }\n\n  var React__default = /*#__PURE__*/_interopDefaultLegacy(React);\n  /*! *****************************************************************************\r\n  Copyright (c) Microsoft Corporation.\r\n    Permission to use, copy, modify, and/or distribute this software for any\r\n  purpose with or without fee is hereby granted.\r\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n  PERFORMANCE OF THIS SOFTWARE.\r\n  ***************************************************************************** */\n\n\n  var __assign = function () {\n    __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n\n      return t;\n    };\n\n    return __assign.apply(this, arguments);\n  };\n  /** This file is copied from https://github.com/facebook/react/blob/master/packages/use-subscription/src/useSubscription.js\n   * and updated by David Fahlander to also handle error callbacks by throwing the error in the renderer\n   * so it can be caught by a react error boundrary.\n   */\n\n\n  var useDebugValue = React__default['default'].useDebugValue,\n      useEffect = React__default['default'].useEffect,\n      useState = React__default['default'].useState; // Hook used for safely managing subscriptions in concurrent mode.\n  //\n  // In order to avoid removing and re-adding subscriptions each time this hook is called,\n  // the parameters passed to this hook should be memoized in some way–\n  // either by wrapping the entire params object with useMemo()\n  // or by wrapping the individual callbacks with useCallback().\n\n  function useSubscription(_a) {\n    var // (Synchronously) returns the current value of our subscription.\n    getCurrentValue = _a.getCurrentValue,\n        // This function is passed an event handler to attach to the subscription.\n    // It should return an unsubscribe function that removes the handler.\n    subscribe = _a.subscribe; // Read the current value from our subscription.\n    // When this value changes, we'll schedule an update with React.\n    // It's important to also store the hook params so that we can check for staleness.\n    // (See the comment in checkForUpdates() below for more info.)\n\n    var _b = useState(function () {\n      return {\n        getCurrentValue: getCurrentValue,\n        subscribe: subscribe,\n        value: getCurrentValue(),\n        error: null\n      };\n    }),\n        state = _b[0],\n        setState = _b[1]; // If there is an error, throw it so that an Error Boundrary can catch it.\n\n\n    if (state.error) throw state.error;\n    var valueToReturn = state.value; // If parameters have changed since our last render, schedule an update with its current value.\n\n    if (state.getCurrentValue !== getCurrentValue || state.subscribe !== subscribe) {\n      // If the subscription has been updated, we'll schedule another update with React.\n      // React will process this update immediately, so the old subscription value won't be committed.\n      // It is still nice to avoid returning a mismatched value though, so let's override the return value.\n      valueToReturn = getCurrentValue();\n      setState({\n        getCurrentValue: getCurrentValue,\n        subscribe: subscribe,\n        value: valueToReturn,\n        error: null\n      });\n    } // Display the current value for this hook in React DevTools.\n\n\n    useDebugValue(valueToReturn); // It is important not to subscribe while rendering because this can lead to memory leaks.\n    // (Learn more at reactjs.org/docs/strict-mode.html#detecting-unexpected-side-effects)\n    // Instead, we wait until the commit phase to attach our handler.\n    //\n    // We intentionally use a passive effect (useEffect) rather than a synchronous one (useLayoutEffect)\n    // so that we don't stretch the commit phase.\n    // This also has an added benefit when multiple components are subscribed to the same source:\n    // It allows each of the event handlers to safely schedule work without potentially removing an another handler.\n    // (Learn more at https://codesandbox.io/s/k0yvr5970o)\n\n    useEffect(function () {\n      var didUnsubscribe = false;\n\n      var checkForUpdates = function () {\n        // It's possible that this callback will be invoked even after being unsubscribed,\n        // if it's removed as a result of a subscription event/update.\n        // In this case, React will log a DEV warning about an update from an unmounted component.\n        // We can avoid triggering that warning with this check.\n        if (didUnsubscribe) {\n          return;\n        } // We use a state updater function to avoid scheduling work for a stale source.\n        // However it's important to eagerly read the currently value,\n        // so that all scheduled work shares the same value (in the event of multiple subscriptions).\n        // This avoids visual \"tearing\" when a mutation happens during a (concurrent) render.\n\n\n        var value = getCurrentValue();\n        setState(function (prevState) {\n          // Ignore values from stale sources!\n          // Since we subscribe an unsubscribe in a passive effect,\n          // it's possible that this callback will be invoked for a stale (previous) subscription.\n          // This check avoids scheduling an update for that stale subscription.\n          if (prevState.getCurrentValue !== getCurrentValue || prevState.subscribe !== subscribe) {\n            return prevState;\n          } // Some subscriptions will auto-invoke the handler, even if the value hasn't changed.\n          // If the value hasn't changed, no update is needed.\n          // Return state as-is so React can bail out and avoid an unnecessary render.\n\n\n          if (prevState.value === value) {\n            return prevState;\n          }\n\n          return __assign(__assign({}, prevState), {\n            value: value\n          });\n        });\n      };\n\n      var unsubscribe = subscribe(checkForUpdates, function (error) {\n        return setState(function (prevState) {\n          return __assign(__assign({}, prevState), {\n            error: error\n          });\n        });\n      }); // Because we're subscribing in a passive effect,\n      // it's possible that an update has occurred between render and our effect handler.\n      // Check for this and schedule an update if work has occurred.\n\n      checkForUpdates();\n      return function () {\n        didUnsubscribe = true;\n        unsubscribe();\n      };\n    }, [getCurrentValue, subscribe]); // Return the current value for our caller to use while rendering.\n\n    return valueToReturn;\n  }\n\n  function useLiveQuery(querier, dependencies, defaultResult) {\n    var _a = React__default['default'].useState(defaultResult),\n        lastResult = _a[0],\n        setLastResult = _a[1];\n\n    var subscription = React__default['default'].useMemo(function () {\n      // Make it remember previus subscription's default value when\n      // resubscribing (á la useTransition())\n      var currentValue = lastResult;\n      var observable = dexie.liveQuery(querier);\n      return {\n        getCurrentValue: function () {\n          return currentValue;\n        },\n        subscribe: function (onNext, onError) {\n          var esSubscription = observable.subscribe(function (value) {\n            currentValue = value;\n            setLastResult(value);\n            onNext(value);\n          }, onError);\n          return esSubscription.unsubscribe.bind(esSubscription);\n        }\n      };\n    }, // Re-subscribe any time any of the given dependencies change\n    dependencies || []); // The value returned by this hook reflects the current result from the querier\n    // Our component will automatically be re-rendered when that value changes.\n\n    var value = useSubscription(subscription);\n    return value;\n  }\n\n  exports.useLiveQuery = useLiveQuery;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"sources":["../node_modules/tslib/tslib.es6.js","../src/use-subscription.ts","../src/dexie-react-hooks.ts"],"names":["React","liveQuery"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/** This file is copied from https://github.com/facebook/react/blob/master/packages/use-subscription/src/useSubscription.js\n * and updated by David Fahlander to also handle error callbacks by throwing the error in the renderer\n * so it can be caught by a react error boundrary.\n */\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n * \n */\n\nimport React from 'react';\nconst {useDebugValue, useEffect, useState} = React;\n\n// Hook used for safely managing subscriptions in concurrent mode.\n//\n// In order to avoid removing and re-adding subscriptions each time this hook is called,\n// the parameters passed to this hook should be memoized in some way–\n// either by wrapping the entire params object with useMemo()\n// or by wrapping the individual callbacks with useCallback().\nexport function useSubscription<Value>({\n  // (Synchronously) returns the current value of our subscription.\n  getCurrentValue,\n\n  // This function is passed an event handler to attach to the subscription.\n  // It should return an unsubscribe function that removes the handler.\n  subscribe,\n}: {\n  getCurrentValue: () => Value,\n  subscribe: (callback: (val: Value) => void, onError: (error: any) => void) => () => void,\n}): Value {\n  // Read the current value from our subscription.\n  // When this value changes, we'll schedule an update with React.\n  // It's important to also store the hook params so that we can check for staleness.\n  // (See the comment in checkForUpdates() below for more info.)\n  const [state, setState] = useState(() => ({\n    getCurrentValue,\n    subscribe,\n    value: getCurrentValue(),\n    error: null\n  }));\n  // If there is an error, throw it so that an Error Boundrary can catch it.\n  if (state.error) throw state.error;\n\n  let valueToReturn = state.value;\n\n  // If parameters have changed since our last render, schedule an update with its current value.\n  if (\n    state.getCurrentValue !== getCurrentValue ||\n    state.subscribe !== subscribe\n  ) {\n    // If the subscription has been updated, we'll schedule another update with React.\n    // React will process this update immediately, so the old subscription value won't be committed.\n    // It is still nice to avoid returning a mismatched value though, so let's override the return value.\n    valueToReturn = getCurrentValue();\n\n    setState({\n      getCurrentValue,\n      subscribe,\n      value: valueToReturn,\n      error: null\n    });\n  }\n\n  // Display the current value for this hook in React DevTools.\n  useDebugValue(valueToReturn);\n\n  // It is important not to subscribe while rendering because this can lead to memory leaks.\n  // (Learn more at reactjs.org/docs/strict-mode.html#detecting-unexpected-side-effects)\n  // Instead, we wait until the commit phase to attach our handler.\n  //\n  // We intentionally use a passive effect (useEffect) rather than a synchronous one (useLayoutEffect)\n  // so that we don't stretch the commit phase.\n  // This also has an added benefit when multiple components are subscribed to the same source:\n  // It allows each of the event handlers to safely schedule work without potentially removing an another handler.\n  // (Learn more at https://codesandbox.io/s/k0yvr5970o)\n  useEffect(() => {\n    let didUnsubscribe = false;\n\n    const checkForUpdates = () => {\n      // It's possible that this callback will be invoked even after being unsubscribed,\n      // if it's removed as a result of a subscription event/update.\n      // In this case, React will log a DEV warning about an update from an unmounted component.\n      // We can avoid triggering that warning with this check.\n      if (didUnsubscribe) {\n        return;\n      }\n\n      // We use a state updater function to avoid scheduling work for a stale source.\n      // However it's important to eagerly read the currently value,\n      // so that all scheduled work shares the same value (in the event of multiple subscriptions).\n      // This avoids visual \"tearing\" when a mutation happens during a (concurrent) render.\n      const value = getCurrentValue();\n\n      setState(prevState => {\n        // Ignore values from stale sources!\n        // Since we subscribe an unsubscribe in a passive effect,\n        // it's possible that this callback will be invoked for a stale (previous) subscription.\n        // This check avoids scheduling an update for that stale subscription.\n        if (\n          prevState.getCurrentValue !== getCurrentValue ||\n          prevState.subscribe !== subscribe\n        ) {\n          return prevState;\n        }\n\n        // Some subscriptions will auto-invoke the handler, even if the value hasn't changed.\n        // If the value hasn't changed, no update is needed.\n        // Return state as-is so React can bail out and avoid an unnecessary render.\n        if (prevState.value === value) {\n          return prevState;\n        }\n\n        return {...prevState, value};\n      });\n    };\n    const unsubscribe = subscribe(checkForUpdates, error => setState(prevState => ({\n      ...prevState,\n      error\n    })));\n\n    // Because we're subscribing in a passive effect,\n    // it's possible that an update has occurred between render and our effect handler.\n    // Check for this and schedule an update if work has occurred.\n    checkForUpdates();\n\n    return () => {\n      didUnsubscribe = true;\n      unsubscribe();\n    };\n  }, [getCurrentValue, subscribe]);\n\n  // Return the current value for our caller to use while rendering.\n  return valueToReturn;\n}","import {liveQuery} from \"dexie\";\nimport {useSubscription} from \"./use-subscription\";\nimport React from \"react\";\n\nexport function useLiveQuery<T>(querier: ()=>Promise<T> | T, dependencies?: any[]): T | undefined;\nexport function useLiveQuery<T,TDefault> (querier: ()=>Promise<T> | T, dependencies: any[], defaultResult: TDefault) : T | TDefault;\nexport function useLiveQuery<T,TDefault> (querier: ()=>Promise<T> | T, dependencies?: any[], defaultResult?: TDefault) : T | TDefault{\n  const [lastResult, setLastResult] = React.useState(defaultResult as T | TDefault);\n  const subscription = React.useMemo(\n    () => {\n      // Make it remember previus subscription's default value when\n      // resubscribing (á la useTransition())\n      let currentValue = lastResult;\n      const observable = liveQuery(querier);\n      return {\n        getCurrentValue: () => currentValue,\n        subscribe: (onNext, onError) => {\n          const esSubscription = observable.subscribe(value => {\n            currentValue = value;\n            setLastResult(value);\n            onNext(value);\n          }, onError);\n          return esSubscription.unsubscribe.bind(esSubscription);\n        }\n      };\n    },\n \n    // Re-subscribe any time any of the given dependencies change\n    dependencies || []\n  );\n \n  // The value returned by this hook reflects the current result from the querier\n  // Our component will automatically be re-rendered when that value changes.\n  const value = useSubscription(subscription);\n  return value;\n}"]},"metadata":{},"sourceType":"script"}