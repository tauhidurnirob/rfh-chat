{"ast":null,"code":"import defaults from '../defaults';\nimport { batch } from './batched-updates';\nimport supports from './supported-features';\nconst QUEUE = [];\nlet scheduled;\nexport default function schedule(fn) {\n  // if we are in node/tests or feature disabled, make updates sync batched\n  if (!defaults.batchUpdates || !supports.scheduling()) return batch(() => fn()); // Add to queue if not already there\n  // so we avoid multiple notifications to same store listeners\n\n  if (!QUEUE.includes(fn)) QUEUE.push(fn); // if something already started schedule, skip\n\n  if (scheduled) return;\n  scheduled = batch(() => {\n    let queueFn;\n\n    while (queueFn = QUEUE.shift()) queueFn();\n\n    scheduled = null;\n  });\n}","map":{"version":3,"sources":["/Users/nirob/Desktop/rfh-chat/simplechat/node_modules/react-sweet-state/lib/esm/utils/schedule.js"],"names":["defaults","batch","supports","QUEUE","scheduled","schedule","fn","batchUpdates","scheduling","includes","push","queueFn","shift"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,aAArB;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,MAAMC,KAAK,GAAG,EAAd;AACA,IAAIC,SAAJ;AACA,eAAe,SAASC,QAAT,CAAkBC,EAAlB,EAAsB;AACnC;AACA,MAAI,CAACN,QAAQ,CAACO,YAAV,IAA0B,CAACL,QAAQ,CAACM,UAAT,EAA/B,EAAsD,OAAOP,KAAK,CAAC,MAAMK,EAAE,EAAT,CAAZ,CAFnB,CAE6C;AAChF;;AAEA,MAAI,CAACH,KAAK,CAACM,QAAN,CAAeH,EAAf,CAAL,EAAyBH,KAAK,CAACO,IAAN,CAAWJ,EAAX,EALU,CAKM;;AAEzC,MAAIF,SAAJ,EAAe;AACfA,EAAAA,SAAS,GAAGH,KAAK,CAAC,MAAM;AACtB,QAAIU,OAAJ;;AAEA,WAAOA,OAAO,GAAGR,KAAK,CAACS,KAAN,EAAjB,EAAgCD,OAAO;;AAEvCP,IAAAA,SAAS,GAAG,IAAZ;AACD,GANgB,CAAjB;AAOD","sourcesContent":["import defaults from '../defaults';\nimport { batch } from './batched-updates';\nimport supports from './supported-features';\nconst QUEUE = [];\nlet scheduled;\nexport default function schedule(fn) {\n  // if we are in node/tests or feature disabled, make updates sync batched\n  if (!defaults.batchUpdates || !supports.scheduling()) return batch(() => fn()); // Add to queue if not already there\n  // so we avoid multiple notifications to same store listeners\n\n  if (!QUEUE.includes(fn)) QUEUE.push(fn); // if something already started schedule, skip\n\n  if (scheduled) return;\n  scheduled = batch(() => {\n    let queueFn;\n\n    while (queueFn = QUEUE.shift()) queueFn();\n\n    scheduled = null;\n  });\n}"]},"metadata":{},"sourceType":"module"}