{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Context } from '../context';\nimport { StoreRegistry, bindActions, defaultRegistry } from '../store';\nimport shallowEqual from '../utils/shallow-equal';\n\nconst noop = () => () => {};\n\nexport default class Container extends Component {\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      scope\n    } = nextProps;\n    const hasScopeChanged = scope !== prevState.scope;\n    let nextState = null;\n\n    if (hasScopeChanged) {\n      const actions = prevState.bindContainerActions(scope);\n      nextState = {\n        scope,\n        scopedActions: actions\n      };\n    } // We trigger the action here so subscribers get new values ASAP\n\n\n    prevState.triggerContainerAction(nextProps);\n    return nextState;\n  }\n\n  constructor(props, context) {\n    super(props, context);\n\n    _defineProperty(this, \"registry\", new StoreRegistry('__local__'));\n\n    _defineProperty(this, \"scopedHooks\", {});\n\n    _defineProperty(this, \"bindContainerActions\", scope => {\n      const {\n        storeType,\n        hooks\n      } = this.constructor;\n      const {\n        api\n      } = this.state; // we explicitly pass scope as it might be changed\n\n      const {\n        storeState\n      } = api.getStore(storeType, scope);\n      const actions = bindActions(storeType.actions, storeState, this.getContainerProps);\n      this.scopedHooks = bindActions(hooks, storeState, this.getContainerProps, actions); // make sure we also reset actionProps\n\n      this.actionProps = null;\n      return actions;\n    });\n\n    _defineProperty(this, \"triggerContainerAction\", nextProps => {\n      // eslint-disable-next-line no-unused-vars\n      const restProps = _objectWithoutPropertiesLoose(nextProps, [\"children\", \"scope\", \"isGlobal\"]);\n\n      if (shallowEqual(this.actionProps, restProps)) return; // store restProps on instance so we can diff and use fresh props\n      // in actions even before react sets them in this.props\n\n      this.actionProps = restProps;\n\n      if (this.scopedHooks.onInit) {\n        this.scopedHooks.onInit();\n        this.scopedHooks.onInit = null;\n      } else {\n        this.scopedHooks.onUpdate();\n      }\n    });\n\n    _defineProperty(this, \"getContainerProps\", () => this.actionProps);\n\n    const {\n      // These fallbacks are needed only to make enzyme shallow work\n      // as it does not fully support provider-less Context enzyme#1553\n      globalRegistry = defaultRegistry,\n      getStore: _getStore = defaultRegistry.getStore\n    } = this.context;\n    this.state = {\n      api: {\n        globalRegistry,\n        getStore: (Store, scope) => this.getScopedStore(Store, scope) || _getStore(Store)\n      },\n      // stored to make them available in getDerivedStateFromProps\n      // as js context there is null https://github.com/facebook/react/issues/12612\n      bindContainerActions: this.bindContainerActions,\n      triggerContainerAction: this.triggerContainerAction,\n      scope: props.scope\n    };\n    this.state.scopedActions = this.bindContainerActions(props.scope);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.scope !== prevProps.scope) {\n      // Trigger a forced update on all subscribers\n      // as render might have been blocked\n      this.triggerScopeChange(prevProps.scope, this.props.scope); // Check if instance has still subscribers, if not delete\n\n      this.deleteScopedStore(prevProps.scope);\n    }\n  }\n\n  componentWillUnmount() {\n    // schedule on next tick as this is called by React before useEffect cleanup\n    // so if we run immediately listeners will still be there and run\n    Promise.resolve().then(() => {\n      this.scopedHooks.onCleanup(); // Check if scope has still subscribers, if not delete\n\n      this.deleteScopedStore();\n    });\n  }\n\n  getRegistry() {\n    const isLocal = !this.props.scope && !this.props.isGlobal;\n    return isLocal ? this.registry : this.state.api.globalRegistry;\n  }\n\n  getScopedStore(Store, scopeId = this.props.scope) {\n    const {\n      storeType\n    } = this.constructor;\n\n    if (Store !== storeType) {\n      return null;\n    }\n\n    const {\n      storeState\n    } = this.getRegistry().getStore(Store, scopeId); // instead of returning global bound actions\n    // we return the ones with the countainer props binding\n\n    return {\n      storeState,\n      actions: this.state.scopedActions\n    };\n  }\n\n  triggerScopeChange(prevScopeId, scopeId) {\n    const {\n      storeType\n    } = this.constructor;\n    const previous = this.getScopedStore(storeType, prevScopeId);\n    const current = this.getScopedStore(storeType, scopeId); // When called, subscribers that have already re-rendered with the new\n    // scope are no longer subscribed to the old one, so we \"force update\"\n    // the remaining.\n    // This is sub-optimal as if there are other containers with the same\n    // old scope id we will re-render those too, but better than using context\n    // as that will re-render all children even if pure/memo\n\n    previous.storeState.notify(current.storeState);\n  }\n\n  deleteScopedStore(scopeId = this.props.scope) {\n    const {\n      storeType\n    } = this.constructor;\n    const {\n      storeState\n    } = this.getScopedStore(storeType, scopeId);\n\n    if (scopeId != null && !storeState.listeners().length) {\n      this.getRegistry().deleteStore(storeType, scopeId);\n    }\n  }\n\n  render() {\n    const {\n      children\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Context.Provider, {\n      value: this.state.api\n    }, children);\n  }\n\n}\n\n_defineProperty(Container, \"propTypes\", {\n  children: PropTypes.node,\n  scope: PropTypes.string,\n  isGlobal: PropTypes.bool\n});\n\n_defineProperty(Container, \"storeType\", null);\n\n_defineProperty(Container, \"hooks\", null);\n\n_defineProperty(Container, \"contextType\", Context);\n\nexport function createContainer(Store, {\n  onInit = noop,\n  onUpdate = noop,\n  onCleanup = noop,\n  displayName = ''\n} = {}) {\n  var _class, _temp;\n\n  return _temp = _class = class extends Container {}, _defineProperty(_class, \"storeType\", Store), _defineProperty(_class, \"displayName\", displayName || `Container(${Store.key[0]})`), _defineProperty(_class, \"hooks\", {\n    onInit,\n    onUpdate,\n    onCleanup\n  }), _temp;\n}","map":{"version":3,"sources":["/Users/nirob/Desktop/rfh-chat/simplechat/node_modules/react-sweet-state/lib/esm/components/container.js"],"names":["_objectWithoutPropertiesLoose","source","excluded","target","sourceKeys","Object","keys","key","i","length","indexOf","_defineProperty","obj","value","defineProperty","enumerable","configurable","writable","React","Component","PropTypes","Context","StoreRegistry","bindActions","defaultRegistry","shallowEqual","noop","Container","getDerivedStateFromProps","nextProps","prevState","scope","hasScopeChanged","nextState","actions","bindContainerActions","scopedActions","triggerContainerAction","constructor","props","context","storeType","hooks","api","state","storeState","getStore","getContainerProps","scopedHooks","actionProps","restProps","onInit","onUpdate","globalRegistry","_getStore","Store","getScopedStore","componentDidUpdate","prevProps","triggerScopeChange","deleteScopedStore","componentWillUnmount","Promise","resolve","then","onCleanup","getRegistry","isLocal","isGlobal","registry","scopeId","prevScopeId","previous","current","notify","listeners","deleteStore","render","children","createElement","Provider","node","string","bool","createContainer","displayName","_class","_temp"],"mappings":"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","sourcesContent":["function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Context } from '../context';\nimport { StoreRegistry, bindActions, defaultRegistry } from '../store';\nimport shallowEqual from '../utils/shallow-equal';\n\nconst noop = () => () => {};\n\nexport default class Container extends Component {\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      scope\n    } = nextProps;\n    const hasScopeChanged = scope !== prevState.scope;\n    let nextState = null;\n\n    if (hasScopeChanged) {\n      const actions = prevState.bindContainerActions(scope);\n      nextState = {\n        scope,\n        scopedActions: actions\n      };\n    } // We trigger the action here so subscribers get new values ASAP\n\n\n    prevState.triggerContainerAction(nextProps);\n    return nextState;\n  }\n\n  constructor(props, context) {\n    super(props, context);\n\n    _defineProperty(this, \"registry\", new StoreRegistry('__local__'));\n\n    _defineProperty(this, \"scopedHooks\", {});\n\n    _defineProperty(this, \"bindContainerActions\", scope => {\n      const {\n        storeType,\n        hooks\n      } = this.constructor;\n      const {\n        api\n      } = this.state; // we explicitly pass scope as it might be changed\n\n      const {\n        storeState\n      } = api.getStore(storeType, scope);\n      const actions = bindActions(storeType.actions, storeState, this.getContainerProps);\n      this.scopedHooks = bindActions(hooks, storeState, this.getContainerProps, actions); // make sure we also reset actionProps\n\n      this.actionProps = null;\n      return actions;\n    });\n\n    _defineProperty(this, \"triggerContainerAction\", nextProps => {\n      // eslint-disable-next-line no-unused-vars\n      const restProps = _objectWithoutPropertiesLoose(nextProps, [\"children\", \"scope\", \"isGlobal\"]);\n\n      if (shallowEqual(this.actionProps, restProps)) return; // store restProps on instance so we can diff and use fresh props\n      // in actions even before react sets them in this.props\n\n      this.actionProps = restProps;\n\n      if (this.scopedHooks.onInit) {\n        this.scopedHooks.onInit();\n        this.scopedHooks.onInit = null;\n      } else {\n        this.scopedHooks.onUpdate();\n      }\n    });\n\n    _defineProperty(this, \"getContainerProps\", () => this.actionProps);\n\n    const {\n      // These fallbacks are needed only to make enzyme shallow work\n      // as it does not fully support provider-less Context enzyme#1553\n      globalRegistry = defaultRegistry,\n      getStore: _getStore = defaultRegistry.getStore\n    } = this.context;\n    this.state = {\n      api: {\n        globalRegistry,\n        getStore: (Store, scope) => this.getScopedStore(Store, scope) || _getStore(Store)\n      },\n      // stored to make them available in getDerivedStateFromProps\n      // as js context there is null https://github.com/facebook/react/issues/12612\n      bindContainerActions: this.bindContainerActions,\n      triggerContainerAction: this.triggerContainerAction,\n      scope: props.scope\n    };\n    this.state.scopedActions = this.bindContainerActions(props.scope);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.scope !== prevProps.scope) {\n      // Trigger a forced update on all subscribers\n      // as render might have been blocked\n      this.triggerScopeChange(prevProps.scope, this.props.scope); // Check if instance has still subscribers, if not delete\n\n      this.deleteScopedStore(prevProps.scope);\n    }\n  }\n\n  componentWillUnmount() {\n    // schedule on next tick as this is called by React before useEffect cleanup\n    // so if we run immediately listeners will still be there and run\n    Promise.resolve().then(() => {\n      this.scopedHooks.onCleanup(); // Check if scope has still subscribers, if not delete\n\n      this.deleteScopedStore();\n    });\n  }\n\n  getRegistry() {\n    const isLocal = !this.props.scope && !this.props.isGlobal;\n    return isLocal ? this.registry : this.state.api.globalRegistry;\n  }\n\n  getScopedStore(Store, scopeId = this.props.scope) {\n    const {\n      storeType\n    } = this.constructor;\n\n    if (Store !== storeType) {\n      return null;\n    }\n\n    const {\n      storeState\n    } = this.getRegistry().getStore(Store, scopeId); // instead of returning global bound actions\n    // we return the ones with the countainer props binding\n\n    return {\n      storeState,\n      actions: this.state.scopedActions\n    };\n  }\n\n  triggerScopeChange(prevScopeId, scopeId) {\n    const {\n      storeType\n    } = this.constructor;\n    const previous = this.getScopedStore(storeType, prevScopeId);\n    const current = this.getScopedStore(storeType, scopeId); // When called, subscribers that have already re-rendered with the new\n    // scope are no longer subscribed to the old one, so we \"force update\"\n    // the remaining.\n    // This is sub-optimal as if there are other containers with the same\n    // old scope id we will re-render those too, but better than using context\n    // as that will re-render all children even if pure/memo\n\n    previous.storeState.notify(current.storeState);\n  }\n\n  deleteScopedStore(scopeId = this.props.scope) {\n    const {\n      storeType\n    } = this.constructor;\n    const {\n      storeState\n    } = this.getScopedStore(storeType, scopeId);\n\n    if (scopeId != null && !storeState.listeners().length) {\n      this.getRegistry().deleteStore(storeType, scopeId);\n    }\n  }\n\n  render() {\n    const {\n      children\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Context.Provider, {\n      value: this.state.api\n    }, children);\n  }\n\n}\n\n_defineProperty(Container, \"propTypes\", {\n  children: PropTypes.node,\n  scope: PropTypes.string,\n  isGlobal: PropTypes.bool\n});\n\n_defineProperty(Container, \"storeType\", null);\n\n_defineProperty(Container, \"hooks\", null);\n\n_defineProperty(Container, \"contextType\", Context);\n\nexport function createContainer(Store, {\n  onInit = noop,\n  onUpdate = noop,\n  onCleanup = noop,\n  displayName = ''\n} = {}) {\n  var _class, _temp;\n\n  return _temp = _class = class extends Container {}, _defineProperty(_class, \"storeType\", Store), _defineProperty(_class, \"displayName\", displayName || `Container(${Store.key[0]})`), _defineProperty(_class, \"hooks\", {\n    onInit,\n    onUpdate,\n    onCleanup\n  }), _temp;\n}"]},"metadata":{},"sourceType":"module"}