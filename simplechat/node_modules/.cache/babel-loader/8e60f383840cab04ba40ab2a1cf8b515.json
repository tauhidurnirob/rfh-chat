{"ast":null,"code":"var _jsxFileName = \"/Users/nirob/Desktop/rfh-chat/simplechat/src/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport classes from './Chat.module.css';\nimport { useLiveQuery } from \"dexie-react-hooks\";\nimport db from './Dexie/db';\nimport worker from 'worker-loader!./worker'; // eslint-disable-line import/no-webpack-loader-syntax\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chat = () => {\n  _s();\n\n  const [inputVal, setInputVal] = useState('');\n  const workerInstance = worker();\n\n  const {\n    v4: uuidv4\n  } = require('uuid');\n\n  const commandQuery = useRef([]);\n\n  const inputOnChange = e => {\n    setInputVal(e.target.value);\n  };\n\n  const handleKey = event => {\n    if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n      event.preventDefault();\n      addComments(inputVal);\n      let uuid = uuidv4();\n      let obj = {\n        type: 'DISCUSSION_COMMENT_ADD_COMMAND',\n        cmnt: inputVal,\n        uuid: uuid\n      };\n      workerInstance.postMessage({\n        op: 'add',\n        value: obj\n      });\n      commandQuery.current.push(obj);\n\n      workerInstance.onmessage = e => {\n        let data = JSON.parse(e.data);\n        commandQuery.current.filter(f => f.uuid !== data.uuid);\n        console.log(data.cmnt);\n        console.log(\"\" + commandQuery.current);\n      };\n\n      setInputVal('');\n    }\n  };\n\n  const addComments = async text => {\n    await db.comments.add({\n      text: text\n    }).catch(err => {\n      window.alert(err);\n    });\n  }; // db.comments.clear()\n\n\n  const comments = useLiveQuery(() => db.comments.toArray());\n  console.log(comments);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.wrapper,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.chat_area,\n      children: comments ? comments.map(a => {\n        return /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: a.text\n        }, a.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 29\n        }, this);\n      }) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: classes.input_field,\n      onChange: e => inputOnChange(e),\n      onKeyPress: e => handleKey(e),\n      value: inputVal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Chat, \"QjgsMRQ8owV4EzUgWfTBviNDTrk=\", false, function () {\n  return [useLiveQuery];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/nirob/Desktop/rfh-chat/simplechat/src/Chat.js"],"names":["React","useState","useRef","classes","useLiveQuery","db","worker","Chat","inputVal","setInputVal","workerInstance","v4","uuidv4","require","commandQuery","inputOnChange","e","target","value","handleKey","event","code","preventDefault","addComments","uuid","obj","type","cmnt","postMessage","op","current","push","onmessage","data","JSON","parse","filter","f","console","log","text","comments","add","catch","err","window","alert","toArray","wrapper","chat_area","map","a","id","input_field"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AAEA,OAAOC,OAAP,MAAoB,mBAApB;AAEA,SAASC,YAAT,QAA6B,mBAA7B;AAEA,OAAOC,EAAP,MAAe,YAAf;AAEA,OAAOC,MAAP,MAAmB,wBAAnB,C,CAA6C;;;;AAE7C,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACf,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAMS,cAAc,GAAGJ,MAAM,EAA7B;;AAEA,QAAM;AAAEK,IAAAA,EAAE,EAAEC;AAAN,MAAiBC,OAAO,CAAC,MAAD,CAA9B;;AAEA,QAAMC,YAAY,GAAGZ,MAAM,CAAC,EAAD,CAA3B;;AAEA,QAAMa,aAAa,GAAIC,CAAD,IAAO;AACzBP,IAAAA,WAAW,CAACO,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AACH,GAFD;;AAIA,QAAMC,SAAS,GAAIC,KAAD,IAAW;AACzB,QAAIA,KAAK,CAACC,IAAN,KAAe,OAAf,IAA0BD,KAAK,CAACC,IAAN,KAAe,aAA7C,EAA4D;AAC5DD,MAAAA,KAAK,CAACE,cAAN;AACAC,MAAAA,WAAW,CAACf,QAAD,CAAX;AAEA,UAAIgB,IAAI,GAAGZ,MAAM,EAAjB;AACA,UAAIa,GAAG,GAAG;AAACC,QAAAA,IAAI,EAAE,gCAAP;AAAyCC,QAAAA,IAAI,EAAEnB,QAA/C;AAAyDgB,QAAAA,IAAI,EAAEA;AAA/D,OAAV;AACAd,MAAAA,cAAc,CAACkB,WAAf,CAA2B;AAACC,QAAAA,EAAE,EAAC,KAAJ;AAAWX,QAAAA,KAAK,EAAEO;AAAlB,OAA3B;AACAX,MAAAA,YAAY,CAACgB,OAAb,CAAqBC,IAArB,CAA0BN,GAA1B;;AAEAf,MAAAA,cAAc,CAACsB,SAAf,GAA2BhB,CAAC,IAAI;AAC5B,YAAIiB,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWnB,CAAC,CAACiB,IAAb,CAAX;AACAnB,QAAAA,YAAY,CAACgB,OAAb,CAAqBM,MAArB,CAA4BC,CAAC,IAAIA,CAAC,CAACb,IAAF,KAAWS,IAAI,CAACT,IAAjD;AACAc,QAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACN,IAAjB;AACAW,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAGzB,YAAY,CAACgB,OAA5B;AACH,OALD;;AAOArB,MAAAA,WAAW,CAAC,EAAD,CAAX;AACC;AACJ,GAnBD;;AAqBA,QAAMc,WAAW,GAAG,MAAOiB,IAAP,IAAgB;AAChC,UAAMnC,EAAE,CAACoC,QAAH,CAAYC,GAAZ,CAAgB;AAClBF,MAAAA,IAAI,EAAEA;AADY,KAAhB,EAEHG,KAFG,CAEIC,GAAD,IAAQ;AACbC,MAAAA,MAAM,CAACC,KAAP,CAAaF,GAAb;AACH,KAJK,CAAN;AAKH,GAND,CAlCe,CAyCf;;;AAEA,QAAMH,QAAQ,GAAGrC,YAAY,CACzB,MAAMC,EAAE,CAACoC,QAAH,CAAYM,OAAZ,EADmB,CAA7B;AAGAT,EAAAA,OAAO,CAACC,GAAR,CAAYE,QAAZ;AAEA,sBACI;AAAK,IAAA,SAAS,EAAEtC,OAAO,CAAC6C,OAAxB;AAAA,4BACI;AAAK,MAAA,SAAS,EAAE7C,OAAO,CAAC8C,SAAxB;AAAA,gBAEQR,QAAQ,GACRA,QAAQ,CAACS,GAAT,CAAcC,CAAD,IAAM;AACf,4BACI;AAAA,oBAAkBA,CAAC,CAACX;AAApB,WAAWW,CAAC,CAACC,EAAb;AAAA;AAAA;AAAA;AAAA,gBADJ;AAGH,OAJD,CADQ,GAMN;AARV;AAAA;AAAA;AAAA;AAAA,YADJ,eAYI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,SAAS,EAAEjD,OAAO,CAACkD,WAAtC;AAAmD,MAAA,QAAQ,EAAGrC,CAAD,IAAMD,aAAa,CAACC,CAAD,CAAhF;AAAqF,MAAA,UAAU,EAAKA,CAAD,IAAMG,SAAS,CAACH,CAAD,CAAlH;AAAuH,MAAA,KAAK,EAAER;AAA9H;AAAA;AAAA;AAAA;AAAA,YAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CAhED;;GAAMD,I;UA2CeH,Y;;;KA3CfG,I;AAkEN,eAAeA,IAAf","sourcesContent":["import React, { useState, useRef } from 'react';\n\nimport classes from './Chat.module.css';\n\nimport { useLiveQuery } from \"dexie-react-hooks\";\n\nimport db from './Dexie/db';\n\nimport worker from 'worker-loader!./worker'; // eslint-disable-line import/no-webpack-loader-syntax\n\nconst Chat = () => {\n    const [inputVal, setInputVal] = useState('');\n\n    const workerInstance = worker();\n\n    const { v4: uuidv4 } = require('uuid');\n\n    const commandQuery = useRef([]);\n\n    const inputOnChange = (e) => {\n        setInputVal(e.target.value);\n    }\n\n    const handleKey = (event) => {\n        if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\n        event.preventDefault();\n        addComments(inputVal);\n\n        let uuid = uuidv4();\n        let obj = {type: 'DISCUSSION_COMMENT_ADD_COMMAND', cmnt: inputVal, uuid: uuid};\n        workerInstance.postMessage({op:'add', value: obj});\n        commandQuery.current.push(obj);\n\n        workerInstance.onmessage = e => {\n            let data = JSON.parse(e.data);\n            commandQuery.current.filter(f => f.uuid !== data.uuid)\n            console.log(data.cmnt)\n            console.log(\"\"+commandQuery.current)\n        }\n\n        setInputVal('');\n        }\n    }\n\n    const addComments = async (text) => {\n        await db.comments.add({\n            text: text\n        }).catch((err)=> {\n            window.alert(err);\n        })\n    }\n    // db.comments.clear()\n\n    const comments = useLiveQuery(\n        () => db.comments.toArray()\n    );\n    console.log(comments)\n\n    return(\n        <div className={classes.wrapper}>\n            <div className={classes.chat_area}>\n                {\n                    comments ?\n                    comments.map((a)=> {\n                        return(\n                            <h4 key = {a.id}>{a.text}</h4>\n                        );\n                    })\n                    : null\n                }\n            </div>\n            <input type=\"text\" className={classes.input_field} onChange={(e)=> inputOnChange(e)} onKeyPress = {(e)=> handleKey(e)} value={inputVal} />\n        </div>\n    );\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}