{"ast":null,"code":"import shallowEqual from './shallow-equal';\n\nfunction exactEqual(objA, objB) {\n  return objA === objB;\n}\n\nfunction areArgumentsEqual(propsMode, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) return false; // If propsMode and 2 arguments, means it is an input selector\n  // and we check for shallow equality on 2nd one to optimise props\n\n  if (propsMode && prev.length === 2) {\n    return prev[0] === next[0] && shallowEqual(prev[1], next[1]);\n  }\n\n  for (let i = 0; i < prev.length; i++) {\n    if (!exactEqual(prev[i], next[i])) return false;\n  }\n\n  return true;\n}\n/**\n * Tailor made memoisation\n */\n\n\nexport default function (resultFn, propsMode = false) {\n  let lastArgs = [];\n  let lastResult;\n  let calledOnce = false;\n\n  const result = function result() {\n    if (calledOnce && areArgumentsEqual(propsMode, arguments, lastArgs)) {\n      return lastResult;\n    }\n\n    const nextResult = resultFn.apply(this, arguments);\n\n    if (!propsMode && shallowEqual(nextResult, lastResult)) {\n      return lastResult;\n    }\n\n    lastResult = nextResult;\n    calledOnce = true;\n    lastArgs = arguments;\n    return lastResult;\n  };\n\n  return result;\n}","map":{"version":3,"sources":["/Users/nirob/Desktop/rfh-chat/simplechat/node_modules/react-sweet-state/lib/esm/utils/memoize.js"],"names":["shallowEqual","exactEqual","objA","objB","areArgumentsEqual","propsMode","prev","next","length","i","resultFn","lastArgs","lastResult","calledOnce","result","arguments","nextResult","apply"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,iBAAzB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,IAA1B,EAAgC;AAC9B,SAAOD,IAAI,KAAKC,IAAhB;AACD;;AAED,SAASC,iBAAT,CAA2BC,SAA3B,EAAsCC,IAAtC,EAA4CC,IAA5C,EAAkD;AAChD,MAAID,IAAI,KAAK,IAAT,IAAiBC,IAAI,KAAK,IAA1B,IAAkCD,IAAI,CAACE,MAAL,KAAgBD,IAAI,CAACC,MAA3D,EAAmE,OAAO,KAAP,CADnB,CACiC;AACjF;;AAEA,MAAIH,SAAS,IAAIC,IAAI,CAACE,MAAL,KAAgB,CAAjC,EAAoC;AAClC,WAAOF,IAAI,CAAC,CAAD,CAAJ,KAAYC,IAAI,CAAC,CAAD,CAAhB,IAAuBP,YAAY,CAACM,IAAI,CAAC,CAAD,CAAL,EAAUC,IAAI,CAAC,CAAD,CAAd,CAA1C;AACD;;AAED,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACE,MAAzB,EAAiCC,CAAC,EAAlC,EAAsC;AACpC,QAAI,CAACR,UAAU,CAACK,IAAI,CAACG,CAAD,CAAL,EAAUF,IAAI,CAACE,CAAD,CAAd,CAAf,EAAmC,OAAO,KAAP;AACpC;;AAED,SAAO,IAAP;AACD;AACD;AACA;AACA;;;AAGA,eAAe,UAAUC,QAAV,EAAoBL,SAAS,GAAG,KAAhC,EAAuC;AACpD,MAAIM,QAAQ,GAAG,EAAf;AACA,MAAIC,UAAJ;AACA,MAAIC,UAAU,GAAG,KAAjB;;AAEA,QAAMC,MAAM,GAAG,SAASA,MAAT,GAAkB;AAC/B,QAAID,UAAU,IAAIT,iBAAiB,CAACC,SAAD,EAAYU,SAAZ,EAAuBJ,QAAvB,CAAnC,EAAqE;AACnE,aAAOC,UAAP;AACD;;AAED,UAAMI,UAAU,GAAGN,QAAQ,CAACO,KAAT,CAAe,IAAf,EAAqBF,SAArB,CAAnB;;AAEA,QAAI,CAACV,SAAD,IAAcL,YAAY,CAACgB,UAAD,EAAaJ,UAAb,CAA9B,EAAwD;AACtD,aAAOA,UAAP;AACD;;AAEDA,IAAAA,UAAU,GAAGI,UAAb;AACAH,IAAAA,UAAU,GAAG,IAAb;AACAF,IAAAA,QAAQ,GAAGI,SAAX;AACA,WAAOH,UAAP;AACD,GAfD;;AAiBA,SAAOE,MAAP;AACD","sourcesContent":["import shallowEqual from './shallow-equal';\n\nfunction exactEqual(objA, objB) {\n  return objA === objB;\n}\n\nfunction areArgumentsEqual(propsMode, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) return false; // If propsMode and 2 arguments, means it is an input selector\n  // and we check for shallow equality on 2nd one to optimise props\n\n  if (propsMode && prev.length === 2) {\n    return prev[0] === next[0] && shallowEqual(prev[1], next[1]);\n  }\n\n  for (let i = 0; i < prev.length; i++) {\n    if (!exactEqual(prev[i], next[i])) return false;\n  }\n\n  return true;\n}\n/**\n * Tailor made memoisation\n */\n\n\nexport default function (resultFn, propsMode = false) {\n  let lastArgs = [];\n  let lastResult;\n  let calledOnce = false;\n\n  const result = function result() {\n    if (calledOnce && areArgumentsEqual(propsMode, arguments, lastArgs)) {\n      return lastResult;\n    }\n\n    const nextResult = resultFn.apply(this, arguments);\n\n    if (!propsMode && shallowEqual(nextResult, lastResult)) {\n      return lastResult;\n    }\n\n    lastResult = nextResult;\n    calledOnce = true;\n    lastArgs = arguments;\n    return lastResult;\n  };\n\n  return result;\n}"]},"metadata":{},"sourceType":"module"}