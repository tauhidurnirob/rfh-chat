{"ast":null,"code":"import applyMiddleware from '../middlewares';\nimport withDevtools from '../enhancers/devtools';\nimport defaults from '../defaults';\nimport schedule from '../utils/schedule';\n\nfunction createStoreState(key, initialState) {\n  let listeners = [];\n  let currentState = initialState;\n  const storeState = {\n    key,\n\n    getState() {\n      return currentState;\n    },\n\n    setState(nextState) {\n      currentState = nextState; // Instead of notifying all hooks immediately, we wait next tick\n      // so multiple actions affecting the same store gets combined\n\n      schedule(storeState.notify);\n    },\n\n    resetState() {\n      storeState.setState(initialState);\n    },\n\n    notify(s = storeState) {\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i](s.getState(), s);\n      }\n    },\n\n    subscribe(listener) {\n      listeners = listeners.concat(listener);\n      return function unsubscribe() {\n        listeners = listeners.filter(fn => fn !== listener);\n      };\n    },\n\n    listeners() {\n      return listeners;\n    }\n\n  };\n  storeState.mutator = applyMiddleware(storeState, defaults.middlewares);\n  return storeState;\n}\n\nexport default withDevtools(createStoreState);","map":{"version":3,"sources":["/Users/nirob/Desktop/rfh-chat/simplechat/node_modules/react-sweet-state/lib/esm/store/create-state.js"],"names":["applyMiddleware","withDevtools","defaults","schedule","createStoreState","key","initialState","listeners","currentState","storeState","getState","setState","nextState","notify","resetState","s","i","length","subscribe","listener","concat","unsubscribe","filter","fn","mutator","middlewares"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,gBAA5B;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,QAAP,MAAqB,mBAArB;;AAEA,SAASC,gBAAT,CAA0BC,GAA1B,EAA+BC,YAA/B,EAA6C;AAC3C,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,YAAY,GAAGF,YAAnB;AACA,QAAMG,UAAU,GAAG;AACjBJ,IAAAA,GADiB;;AAGjBK,IAAAA,QAAQ,GAAG;AACT,aAAOF,YAAP;AACD,KALgB;;AAOjBG,IAAAA,QAAQ,CAACC,SAAD,EAAY;AAClBJ,MAAAA,YAAY,GAAGI,SAAf,CADkB,CACQ;AAC1B;;AAEAT,MAAAA,QAAQ,CAACM,UAAU,CAACI,MAAZ,CAAR;AACD,KAZgB;;AAcjBC,IAAAA,UAAU,GAAG;AACXL,MAAAA,UAAU,CAACE,QAAX,CAAoBL,YAApB;AACD,KAhBgB;;AAkBjBO,IAAAA,MAAM,CAACE,CAAC,GAAGN,UAAL,EAAiB;AACrB,WAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,SAAS,CAACU,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzCT,QAAAA,SAAS,CAACS,CAAD,CAAT,CAAaD,CAAC,CAACL,QAAF,EAAb,EAA2BK,CAA3B;AACD;AACF,KAtBgB;;AAwBjBG,IAAAA,SAAS,CAACC,QAAD,EAAW;AAClBZ,MAAAA,SAAS,GAAGA,SAAS,CAACa,MAAV,CAAiBD,QAAjB,CAAZ;AACA,aAAO,SAASE,WAAT,GAAuB;AAC5Bd,QAAAA,SAAS,GAAGA,SAAS,CAACe,MAAV,CAAiBC,EAAE,IAAIA,EAAE,KAAKJ,QAA9B,CAAZ;AACD,OAFD;AAGD,KA7BgB;;AA+BjBZ,IAAAA,SAAS,GAAG;AACV,aAAOA,SAAP;AACD;;AAjCgB,GAAnB;AAoCAE,EAAAA,UAAU,CAACe,OAAX,GAAqBxB,eAAe,CAACS,UAAD,EAAaP,QAAQ,CAACuB,WAAtB,CAApC;AACA,SAAOhB,UAAP;AACD;;AAED,eAAeR,YAAY,CAACG,gBAAD,CAA3B","sourcesContent":["import applyMiddleware from '../middlewares';\nimport withDevtools from '../enhancers/devtools';\nimport defaults from '../defaults';\nimport schedule from '../utils/schedule';\n\nfunction createStoreState(key, initialState) {\n  let listeners = [];\n  let currentState = initialState;\n  const storeState = {\n    key,\n\n    getState() {\n      return currentState;\n    },\n\n    setState(nextState) {\n      currentState = nextState; // Instead of notifying all hooks immediately, we wait next tick\n      // so multiple actions affecting the same store gets combined\n\n      schedule(storeState.notify);\n    },\n\n    resetState() {\n      storeState.setState(initialState);\n    },\n\n    notify(s = storeState) {\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i](s.getState(), s);\n      }\n    },\n\n    subscribe(listener) {\n      listeners = listeners.concat(listener);\n      return function unsubscribe() {\n        listeners = listeners.filter(fn => fn !== listener);\n      };\n    },\n\n    listeners() {\n      return listeners;\n    }\n\n  };\n  storeState.mutator = applyMiddleware(storeState, defaults.middlewares);\n  return storeState;\n}\n\nexport default withDevtools(createStoreState);"]},"metadata":{},"sourceType":"module"}