function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { bindActions } from './bind-actions';
import createStoreState from './create-state';
export const GLOBAL_SCOPE = '__global__';
export class StoreRegistry {
  constructor(defaultScope = GLOBAL_SCOPE) {
    _defineProperty(this, "stores", new Map());

    _defineProperty(this, "initStore", (Store, key) => {
      const {
        initialState,
        actions
      } = Store;
      const storeState = createStoreState(key, initialState);
      const boundActions = bindActions(actions, storeState);
      const store = {
        storeState,
        actions: boundActions
      };
      this.stores.set(key, store);
      return store;
    });

    _defineProperty(this, "getStore", (Store, scopeId = this.defaultScope) => {
      const key = this.generateKey(Store, scopeId);
      return this.stores.get(key) || this.initStore(Store, key);
    });

    _defineProperty(this, "deleteStore", (Store, scopeId = this.defaultScope) => {
      const key = this.generateKey(Store, scopeId);
      this.stores.delete(key);
    });

    _defineProperty(this, "generateKey", (Store, scopeId) => `${Store.key.join('__')}@${scopeId}`);

    this.defaultScope = defaultScope;
  }

}
export const defaultRegistry = new StoreRegistry();